name: Push on main => Deploy

on:
    push:
        branches: ['main']

permissions:
    contents: read
    pages: write
    id-token: write

concurrency:
    group: 'pages'
    cancel-in-progress: false

jobs:
    build:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Detect package manager
              id: detect-package-manager
              run: |
                  echo "manager=yarn" >> $GITHUB_OUTPUT
                  echo "command=install" >> $GITHUB_OUTPUT
                  echo "runner=yarn" >> $GITHUB_OUTPUT
                  exit 0

            - name: Setup Node
              uses: actions/setup-node@v4
              with:
                  node-version: '20'
                  cache: ${{ steps.detect-package-manager.outputs.manager }}

            - name: Setup Pages
              uses: actions/configure-pages@v4

            - name: Restore cache
              uses: actions/cache@v4
              with:
                  path: |
                      .next/cache
                  # Generate a new cache whenever packages or source files change.
                  key: ${{ runner.os }}-nextjs-${{ hashFiles('**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
                  # If source files changed but packages didn't, rebuild from a prior cache.
                  restore-keys: |
                      ${{ runner.os }}-nextjs-${{ hashFiles('**/yarn.lock') }}-

            - name: Install dependencies
              run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}

            - name: Build with Next.js
              run: |
                  ${{ steps.detect-package-manager.outputs.runner }} next telemetry disable
                  ${{ steps.detect-package-manager.outputs.runner }} next build

            - name: Upload artifact
              uses: actions/upload-pages-artifact@v3
              with:
                  path: ./out

    deploy:
        environment:
            name: github-pages
            url: ${{ steps.deployment.outputs.page_url }}
        runs-on: ubuntu-latest
        needs: build
        steps:
            - name: Deploy to GitHub Pages
              id: deployment
              uses: actions/deploy-pages@v4
